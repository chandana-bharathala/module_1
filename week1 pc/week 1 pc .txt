1. complexity : log(N)
output : 0, 1, 0, 0, 1, 0
2. deepak
3. a.false(not possible)
   b.false(not possible0
   c. true
   d.false(not possible)
   e.false(not possible)
4.	id[]	 0 1 2 3 4 5 6 7 8 9
	----------------------------
	a. 3-4	 0 1 2 4 4 5 6 7 8 9 
	b. 4-9	 0 1 2 9 9 5 6 7 8 9
	c. 8-0	 0 1 2 9 9 5 6 7 0 9
	d. 2-3	 0 1 9 9 9 5 6 7 0 9
	e. 5-6	 0 1 9 9 9 6 6 7 0 9
	f. 5-9	 0 1 9 9 9 9 9 7 0 9
	g. 7-3	 0 1 9 9 9 9 9 9 0 9
	h. 4-8	 0 1 0 0 0 0 0 0 0 0
	i. 6-1	 1 1 1 1 1 1 1 1 1 1

5. size of the stack is 6.
	5 { <--  top
	4 )
	3 (
	2 ] 
	1 [
	0 {
6. order of growth  is N*log(k).
7. order of growth is n.
8. order of growth is 1.
9. order of growth is N^2.
10.	id[]	 0 1 2 3 4 5 6 7 8 9
	----------------------------
	a. 3-4	 0 1 2 4 4 5 6 7 8 9
	b. 4-9	 0 1 2 9 9 5 6 7 8 9
	c. 8-0	 0 1 2 9 9 5 6 7 0 9
	d. 2-3	 0 1 9 9 9 5 6 7 0 9
	e. 5-6	 0 1 9 9 9 6 6 7 0 9 
	f. 5-9	 0 1 9 9 9 9 9 7 0 9
	g. 7-3	 0 1 9 9 9 9 9 9 0 9
	h. 4-8	 0 1 0 0 0 0 0 0 0 0
	i. 6-1	 1 1 1 1 1 1 1 1 1 1

