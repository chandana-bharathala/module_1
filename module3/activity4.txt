Give the order of growth (as a function of N ) of the running times of each of the following code fragments:

Note: use the following Notations for writing Answers: N, 1, log(N), N^2, N*log(N), 2^N, N^3, log(N)

Code-1:     int count = 0;

            for(int i = 0; i < N; i++){

                count++;

            }
answer : the order of growth is N.
	
Code-2:      int sum = 0;

            if(sum == 0){

                sum++;
		}
answer : the order of growth is 1, as the code does not contain any loop.

Code-3:    for(int i = N; i > 0; i < N/2){

            int sum = 0;

		}
answer : the order of growth is log(N).

Code-4:     for(int i = 0; i < N; i++){

                for(int j = 0; j < N; j++){

                    System.out.println(“Hello”);

              		 }

            }
answer : the order of growth is N^2.

Code-5:     for(int i = 0; i < N; i++){

                for(int j = 0; j < N; j = j * 2){

                    System.out.println(“Hello”);

                }

            }
answer : the order of growth is N*log(N).

Code-6:     public int fibonacci(int number) {

 		if (number <= 1) {

                      return number;

                 } 
		else {

                     return fibonacci(number - 1) + fibonacci(number - 2);

                 }

	}

answer : the order of growth is 1, in recurssion there will not be any loop only the function will be called by itself.


